@page "/clients"
@using AutoWorkshop.AutoWorkshopClient.Services
@using AutoWorkshop.Shared.DTOs
@inject IClientService ClientService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<h3>Clients</h3>

@if (clients == null)
{
    <p><em>Loading...</em></p>
}
else if (!clients.Any())
{
    <p>No clients available.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Client ID</th>
                <th>Name</th>
                <th>Address</th>
                <th>Email</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var client in clients)
            {
                <tr>
                    <td>@client.ClientId</td>
                    <td>@client.Name</td>
                    <td>@client.Address</td>
                    <td>@client.Email</td>
                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="() => ViewUpdate(client.ClientId)">Update</button>
                        <button class="btn btn-primary btn-sm" @onclick="() => ViewDetails(client.ClientId)">Részletek</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteClient(client.ClientId)">Törlés</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button class="btn btn-primary btn-sm" @onclick="() => ViewAdd()">Add</button>
    <button class="btn btn-primary btn-sm" @onclick="() => ExportToPDF(clients)">Export To Pdf</button>
}

@code {
    private List<ClientDTO>? clients;

    private void ViewUpdate(int clientId)
    {
        NavigationManager.NavigateTo($"/clients/update/{clientId}");
    }

    private void ViewAdd()
    {
        NavigationManager.NavigateTo($"/clients/add");
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            clients = await ClientService.GetAllAsync();
        }
        catch (Exception ex)
        {
            
            Console.Error.WriteLine($"Error fetching clients: {ex.Message}");
        }
    }

   

    private void ViewDetails(int clientId)
    {
        NavigationManager.NavigateTo($"/clients/{clientId}");
    }

    private async Task DeleteClient(int clientId)
    {
        string v = $"Are you sure you want to delete client {clientId}?";
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { v });
        if (confirm)
        {
            try
            {
                await ClientService.DeleteAsync(clientId);
                clients = await ClientService.GetAllAsync();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error deleting client: {ex.Message}");
            }
        }
    }

    public async Task ExportToPDF(List<ClientDTO> clients)
    {
        using (var memoryStream = new MemoryStream())
        {
          
            var writer = new iText.Kernel.Pdf.PdfWriter(memoryStream);
            var pdf = new iText.Kernel.Pdf.PdfDocument(writer);
            var document = new iText.Layout.Document(pdf);

           
            document.Add(new iText.Layout.Element.Paragraph("Client List").SetFontSize(20));

            
            var table = new iText.Layout.Element.Table(4); // 4 Columns
            table.AddHeaderCell("Client ID");
            table.AddHeaderCell("Name");
            table.AddHeaderCell("Address");
            table.AddHeaderCell("Email");

            
            foreach (var client in clients)
            {
                table.AddCell(client.ClientId.ToString());
                table.AddCell(client.Name);
                table.AddCell(client.Address);
                table.AddCell(client.Email);
            }

           
            document.Add(table);
            document.Close();

           
            var fileBytes = memoryStream.ToArray();
            var base64 = Convert.ToBase64String(fileBytes);
            var fileName = "clients.pdf";

            try
            {
                
                await JSRuntime.InvokeVoidAsync("downloadFile", fileName, base64);

            }
            catch (JSException)
            {
                Console.WriteLine("JavaScript function 'downloadFile' is not yet available.");
            }
        }
    }
}
