@page "/jobs"
@using AutoWorkshop.AutoWorkshopClient.Services
@using AutoWorkshop.Shared.DTOs
@inject IJobService JobService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<h3>Jobs</h3>

@if (jobs == null)

{
    <p><em>Loading...</em></p>
}

else if (!jobs.Any())

{
    <p>No jobs available.</p>
}

else

{
    <table class="table">
        <thead>
            <tr>
                <th>Job ID</th>
                <th>Client Id</th>
                <th>Rendszám</th>
                <th>Gyártás éve</th>
                <th>Kategória</th>
                <th>Leírás</th>
                <th>Súlyosság</th>
                <th>Állapot</th>
                <th>Várható Idő</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var job in jobs)

            {
                <tr>
                    <td>@job.JobId</td>
                    <td>@job.ClientId</td>
                    <td>@job.LicensePlate</td>
                    <td>@job.ManufactureYear</td>
                    <td>@job.Category</td>
                    <td>@job.Description</td>
                    <td>@job.Severity</td>
                    <td>@job.Status</td>
                    <td>@job.EstimatedCost</td>
                    
                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="() => UpdateJob(job.JobId)">Update</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteJob(job.JobId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button class="btn btn-primary btn-sm" @onclick="() => ViewAdd()">Add</button>
    <button class="btn btn-primary btn-sm" @onclick="() => ExportToPDF(jobs)">Export To Pdf</button>
}

@code {
    private List<JobDTO>? jobs;

    private void UpdateJob(int jobId)
    {
        NavigationManager.NavigateTo($"jobs/update/{jobId}");
    }

    private void ViewAdd()
    {
        NavigationManager.NavigateTo("jobs/add");
    }


    protected override async Task OnInitializedAsync()

    {

        try

        {

            jobs = await JobService.GetAllAsync();

        }

        catch (Exception ex)

        {

            

            Console.Error.WriteLine($"Error fetching jobs: {ex.Message}");

        }

    }





    private async Task DeleteJob(int jobId)

    {

        string v = $"Are you sure you want to delete job {jobId}?";

        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { v });

        if (confirm)

        {

            try

            {

                await JobService.DeleteAsync(jobId);

                jobs = await JobService.GetAllAsync();

            }

            catch (Exception ex)

            {

                Console.Error.WriteLine($"Error deleting job: {ex.Message}");

            }

        }

    }

    public async Task ExportToPDF(List<JobDTO> jobs)
    {
        using (var memoryStream = new MemoryStream())
        {
            
            var writer = new iText.Kernel.Pdf.PdfWriter(memoryStream);
            var pdf = new iText.Kernel.Pdf.PdfDocument(writer);
            var document = new iText.Layout.Document(pdf);

            
            document.Add(new iText.Layout.Element.Paragraph("Job List").SetFontSize(20));

           
            var table = new iText.Layout.Element.Table(9);
            table.AddHeaderCell("Job ID");
            table.AddHeaderCell("Client ID");
            table.AddHeaderCell("License Plate");
            table.AddHeaderCell("Manufacture Year");
            table.AddHeaderCell("Category");
            table.AddHeaderCell("Description");
            table.AddHeaderCell("Severity");
            table.AddHeaderCell("Status");
            table.AddHeaderCell("Estimated Cost");

           
            foreach (var job in jobs)
            {
                table.AddCell(job.JobId.ToString());
                table.AddCell(job.ClientId.ToString());
                table.AddCell(job.LicensePlate);
                table.AddCell(job.ManufactureYear.ToString());
                table.AddCell(job.Category);
                table.AddCell(job.Description);
                table.AddCell(job.Severity.ToString());
                table.AddCell(job.Status);
                table.AddCell(job.EstimatedCost.ToString());
            }

            
            document.Add(table);
            document.Close();
            var fileBytes = memoryStream.ToArray();
            var base64 = Convert.ToBase64String(fileBytes);
            var fileName = "jobs.pdf";
            
            try
            {
                
                await JSRuntime.InvokeVoidAsync("downloadFile", fileName, base64);
                
            }
            catch (JSException)
            {
                Console.WriteLine("JavaScript function 'downloadFile' is not yet available.");
            }
        }
    }

    


}
